using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using UglyToad.PdfPig;
using UglyToad.PdfPig.Content;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.Formats;
using Microsoft.SemanticKernel;

namespace DocumentImageExtractor
{
    /// <summary>
    /// DTO for extracted document images with surrounding context
    /// </summary>
    public class ExtractedDocDto
    {
        public string FileName { get; set; }
        public ImageContent ImageContent { get; set; }
        public string PrefixText { get; set; }
        public string PostfixText { get; set; }
    }

    /// <summary>
    /// Extracts images from various document formats (PDF, DOCX) with surrounding text context
    /// </summary>
    public class DocumentImageExtractor
    {
        private const int MaxContextWords = 100;

        /// <summary>
        /// Extract images from a document file
        /// </summary>
        /// <param name="filePath">Path to the document file</param>
        /// <returns>List of extracted images with context</returns>
        public List<ExtractedDocDto> ExtractImages(string filePath)
        {
            if (!File.Exists(filePath))
                throw new FileNotFoundException($"File not found: {filePath}");

            string extension = Path.GetExtension(filePath).ToLowerInvariant();
            string fileName = Path.GetFileName(filePath);

            return extension switch
            {
                ".pdf" => ExtractFromPdf(filePath, fileName),
                ".docx" => ExtractFromDocx(filePath, fileName),
                _ => throw new NotSupportedException($"File format {extension} is not supported")
            };
        }

        /// <summary>
        /// Extract images from PDF documents
        /// </summary>
        private List<ExtractedDocDto> ExtractFromPdf(string filePath, string fileName)
        {
            var results = new List<ExtractedDocDto>();

            using (PdfDocument document = PdfDocument.Open(filePath))
            {
                foreach (Page page in document.GetPages())
                {
                    var images = page.GetImages();
                    var pageText = page.Text;
                    var words = page.GetWords().OrderBy(w => w.BoundingBox.Bottom)
                                              .ThenBy(w => w.BoundingBox.Left)
                                              .ToList();

                    foreach (var image in images)
                    {
                        try
                        {
                            // Get image bounds
                            var imageBounds = image.Bounds;

                            // Extract text before and after image
                            var (prefixText, postfixText) = ExtractContextFromPdfWords(
                                words, imageBounds);

                            // Convert PDF image to ImageContent
                            var imageBytes = image.RawBytes.ToArray();
                            var imageContent = ConvertToImageContent(imageBytes, image);

                            results.Add(new ExtractedDocDto
                            {
                                FileName = fileName,
                                ImageContent = imageContent,
                                PrefixText = prefixText,
                                PostfixText = postfixText
                            });
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error processing image in {fileName}: {ex.Message}");
                        }
                    }
                }
            }

            return results;
        }

        /// <summary>
        /// Extract images from DOCX documents
        /// </summary>
        private List<ExtractedDocDto> ExtractFromDocx(string filePath, string fileName)
        {
            var results = new List<ExtractedDocDto>();

            using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, false))
            {
                var body = wordDoc.MainDocumentPart.Document.Body;
                var elements = body.Elements().ToList();

                // Find all images in the document
                var imageParts = wordDoc.MainDocumentPart.ImageParts.ToList();
                
                foreach (var imagePart in imageParts)
                {
                    try
                    {
                        // Find the drawing/picture element that references this image
                        var imageContext = FindImageContext(elements, imagePart.Uri.ToString());

                        using (var stream = imagePart.GetStream())
                        using (var memoryStream = new MemoryStream())
                        {
                            stream.CopyTo(memoryStream);
                            var imageBytes = memoryStream.ToArray();

                            var imageContent = ConvertToImageContent(
                                imageBytes, 
                                imagePart.ContentType);

                            results.Add(new ExtractedDocDto
                            {
                                FileName = fileName,
                                ImageContent = imageContent,
                                PrefixText = imageContext.prefixText,
                                PostfixText = imageContext.postfixText
                            });
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error processing image in {fileName}: {ex.Message}");
                    }
                }
            }

            return results;
        }

        /// <summary>
        /// Extract context text around an image in PDF
        /// </summary>
        private (string prefix, string postfix) ExtractContextFromPdfWords(
            List<UglyToad.PdfPig.Content.Word> words, 
            UglyToad.PdfPig.Core.PdfRectangle imageBounds)
        {
            var prefixWords = new List<string>();
            var postfixWords = new List<string>();

            foreach (var word in words)
            {
                var wordBottom = word.BoundingBox.Bottom;
                var imageBottom = imageBounds.Bottom;

                // Words before the image (above it in PDF coordinates)
                if (wordBottom > imageBounds.Top)
                {
                    prefixWords.Add(word.Text);
                }
                // Words after the image (below it in PDF coordinates)
                else if (wordBottom < imageBounds.Bottom)
                {
                    postfixWords.Add(word.Text);
                }
            }

            var prefix = LimitWords(string.Join(" ", prefixWords.TakeLast(MaxContextWords * 2)), MaxContextWords);
            var postfix = LimitWords(string.Join(" ", postfixWords.Take(MaxContextWords * 2)), MaxContextWords);

            return (prefix, postfix);
        }

        /// <summary>
        /// Find text context around an image in DOCX
        /// </summary>
        private (string prefixText, string postfixText) FindImageContext(
            List<DocumentFormat.OpenXml.OpenXmlElement> elements, 
            string imageUri)
        {
            var prefixTexts = new List<string>();
            var postfixTexts = new List<string>();
            bool imageFound = false;

            foreach (var element in elements)
            {
                if (element is Paragraph paragraph)
                {
                    string paragraphText = paragraph.InnerText;

                    // Check if this paragraph contains the image
                    bool containsImage = paragraph.Descendants<DocumentFormat.OpenXml.Drawing.Blip>()
                        .Any(blip => blip.Embed?.Value != null);

                    if (containsImage && !imageFound)
                    {
                        imageFound = true;
                        // Add current paragraph text as prefix if before image
                        if (!string.IsNullOrWhiteSpace(paragraphText))
                        {
                            prefixTexts.Add(paragraphText);
                        }
                        continue;
                    }

                    if (!imageFound)
                    {
                        prefixTexts.Add(paragraphText);
                    }
                    else
                    {
                        postfixTexts.Add(paragraphText);
                    }
                }
            }

            var prefix = LimitWords(string.Join(" ", prefixTexts.TakeLast(10)), MaxContextWords);
            var postfix = LimitWords(string.Join(" ", postfixTexts.Take(10)), MaxContextWords);

            return (prefix, postfix);
        }

        /// <summary>
        /// Limit text to specified number of words
        /// </summary>
        private string LimitWords(string text, int maxWords)
        {
            if (string.IsNullOrWhiteSpace(text))
                return string.Empty;

            var words = Regex.Split(text.Trim(), @"\s+")
                            .Where(w => !string.IsNullOrWhiteSpace(w))
                            .ToList();

            if (words.Count <= maxWords)
                return string.Join(" ", words);

            return string.Join(" ", words.Take(maxWords));
        }

        /// <summary>
        /// Convert image bytes to Semantic Kernel ImageContent
        /// </summary>
        private ImageContent ConvertToImageContent(byte[] imageBytes, object imageInfo)
        {
            string mimeType = "image/png"; // default

            try
            {
                // Detect format using ImageSharp
                var detectedFormat = Image.DetectFormat(imageBytes);
                if (detectedFormat != null)
                {
                    mimeType = detectedFormat.DefaultMimeType;
                }
            }
            catch
            {
                // If detection fails, try to infer from imageInfo parameter
                if (imageInfo is string contentType)
                {
                    mimeType = contentType;
                }
            }

            return new ImageContent(imageBytes, mimeType);
        }

        /// <summary>
        /// Convert image bytes with content type to Semantic Kernel ImageContent
        /// </summary>
        private ImageContent ConvertToImageContent(byte[] imageBytes, string contentType)
        {
            // Map common content types
            string mimeType = contentType switch
            {
                "image/jpeg" => "image/jpeg",
                "image/jpg" => "image/jpeg",
                "image/png" => "image/png",
                "image/gif" => "image/gif",
                "image/bmp" => "image/bmp",
                "image/tiff" => "image/tiff",
                _ => "image/png"
            };

            return new ImageContent(imageBytes, mimeType);
        }
    }

    // Example usage
    public class Program
    {
        public static void Main(string[] args)
        {
            var extractor = new DocumentImageExtractor();

            try
            {
                // Extract from PDF
                var pdfResults = extractor.ExtractImages("document.pdf");
                
                // Extract from DOCX
                var docxResults = extractor.ExtractImages("document.docx");

                // Process results
                foreach (var result in pdfResults.Concat(docxResults))
                {
                    Console.WriteLine($"File: {result.FileName}");
                    Console.WriteLine($"Image MIME Type: {result.ImageContent.MimeType}");
                    Console.WriteLine($"Prefix: {result.PrefixText}");
                    Console.WriteLine($"Postfix: {result.PostfixText}");
                    Console.WriteLine(new string('-', 80));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }
}
