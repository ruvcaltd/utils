using Microsoft.Agents;
using Microsoft.Agents.AI;
using Microsoft.Extensions.AI;

public static class AgentFactory
{
    public static Agent CreateResearchAgent(IChatClient client)
    {
        return new Agent(
            name: "ResearchAgent",
            async (context, message, cancellationToken) =>
            {
                var query = message.Content ?? "Explain quantum computing.";
                var response = await client.CompleteAsync(new ChatCompletionRequest
                {
                    Messages = [ new ChatMessage("user", $"Research and explain: {query}") ]
                }, cancellationToken);

                return new AgentMessage(response.Content[0].Text);
            });
    }

    public static Agent CreateSummarizerAgent(IChatClient client)
    {
        return new Agent(
            name: "SummarizerAgent",
            async (context, message, cancellationToken) =>
            {
                var response = await client.CompleteAsync(new ChatCompletionRequest
                {
                    Messages = [ new ChatMessage("user", $"Summarize in 3 bullet points:\n\n{message.Content}") ]
                }, cancellationToken);

                return new AgentMessage(response.Content[0].Text);
            });
    }
}


using Microsoft.Agents;
using Microsoft.Extensions.AI;
using Microsoft.Agents.AI.OpenAI;
using Microsoft.Agents.Workflows;

var builder = WebApplication.CreateBuilder(args);

// --- Register the OpenAI client ---
builder.Services.AddSingleton<IChatClient>(sp =>
    new OpenAIChatClient(
        model: "gpt-4o",
        apiKey: Environment.GetEnvironmentVariable("OPENAI_API_KEY")
    ));

// --- Register agents using DI factory pattern ---
builder.Services.AddSingleton<Agent>(sp => 
    AgentFactory.CreateResearchAgent(sp.GetRequiredService<IChatClient>()));

builder.Services.AddSingleton<Agent>(sp => 
    AgentFactory.CreateSummarizerAgent(sp.GetRequiredService<IChatClient>()));

// --- Optionally register workflow support ---
builder.Services.AddSingleton<IAgentRuntime, AgentRuntime>();
builder.Services.AddControllers();

var app = builder.Build();
app.MapControllers();
app.Run();
